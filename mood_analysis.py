# -*- coding: utf-8 -*-
"""mood_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vHK0J-wVIRiu8y3yj8l11vI_u-IfQwh-
"""

import numpy as np
import pandas as pd
import os

pip install transformers --upgrade

import torch
from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler
import torch.nn.functional as F
from transformers import BertTokenizer,AdamWeightDecay, BertConfig, BertForSequenceClassification,get_linear_schedule_with_warmup
from torch.optim import AdamW

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix,classification_report
from sklearn.metrics import accuracy_score,matthews_corrcoef

from tqdm import tqdm, trange,tnrange,tqdm_notebook
import random
import os
import io

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
n_gpu = torch.cuda.device_count()
torch.cuda.get_device_name(0)
SEED = 19

random.seed(SEED)
np.random.seed(SEED)
torch.manual_seed(SEED)
if device == torch.device("cuda"):
    torch.cuda.manual_seed_all(SEED)

"""**LOADING DATASET**"""

df_train= pd.read_csv("/content/test.txt", delimiter=';', header=None, names=['sentence','label'])
df_test = pd.read_csv("/content/test.txt", delimiter=';', header=None, names=['sentence','label'])
df_val  = pd.read_csv("/content/val.txt", delimiter=';', header=None, names=['sentence','label'])

df = pd.concat([df_train,df_test,df_val])
df['label'].unique()

"""**LABEL ENCODING DATA**"""

from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()
df['label_enc'] = labelencoder.fit_transform(df['label'])

df[['label','label_enc']].drop_duplicates(keep='first')

df.rename(columns={'label':'label_desc'},inplace=True)
df.rename(columns={'label_enc':'label'},inplace=True)

"""**EDA**"""

sentences = df.sentence.values

print("Distribution of data based on labels: ",df.label.value_counts())


MAX_LEN = 256

tokenizer = BertTokenizer.from_pretrained('bert-base-uncased',do_lower_case=True)
input_ids = [tokenizer.encode(sent, add_special_tokens=True,max_length=MAX_LEN,padding='max_length') for sent in sentences]
labels = df.label.values

print("Actual sentence before tokenization: ",sentences[2])
print("Encoded Input from dataset: ",input_ids[2])


attention_masks = []

attention_masks = [[float(i>0) for i in seq] for seq in input_ids]
print(attention_masks[2])

"""****DATA PREPROCESSING****"""

train_inputs,validation_inputs,train_labels,validation_labels = train_test_split(input_ids,labels,random_state=41,test_size=0.1)
train_masks,validation_masks,_,_ = train_test_split(attention_masks,input_ids,random_state=41,test_size=0.1)

train_inputs = torch.tensor(train_inputs)
validation_inputs = torch.tensor(validation_inputs)
train_labels = torch.tensor(train_labels)
validation_labels = torch.tensor(validation_labels)
train_masks = torch.tensor(train_masks)
validation_masks = torch.tensor(validation_masks)


batch_size = 32


train_data = TensorDataset(train_inputs,train_masks,train_labels)
train_sampler = RandomSampler(train_data)
train_dataloader = DataLoader(train_data,sampler=train_sampler,batch_size=batch_size)

validation_data = TensorDataset(validation_inputs,validation_masks,validation_labels)
validation_sampler = RandomSampler(validation_data)
validation_dataloader = DataLoader(validation_data,sampler=validation_sampler,batch_size=batch_size)

"""**STORING DATA IN TENSORS**"""

train_data[0]

type(train_dataloader)

"""****MODEL LOADING****"""

model = BertForSequenceClassification.from_pretrained("bert-base-uncased", num_labels=6).to(device)


lr = 2e-5
adam_epsilon = 1e-8


epochs = 3

num_warmup_steps = 0
num_training_steps = len(train_dataloader) * epochs


optimizer = torch.optim.AdamW(model.parameters(), lr=lr, eps=adam_epsilon)
scheduler = get_linear_schedule_with_warmup(optimizer, num_warmup_steps=num_warmup_steps, num_training_steps=num_training_steps)

"""****TRAINING MODEL****"""

train_loss_set = []
learning_rate = []

model.zero_grad()


from tqdm import trange
for _ in trange(1, epochs + 1, desc='Epoch'):
  print("<" + "="*22 + F" Epoch {_} "+ "="*22 + ">")

  batch_loss = 0

  for step, batch in enumerate(train_dataloader):

    model.train()


    batch = tuple(t.to(device) for t in batch)
    # Unpack the inputs from our dataloader
    b_input_ids, b_input_mask, b_labels = batch

    # Forward pass
    outputs = model(b_input_ids, token_type_ids=None, attention_mask=b_input_mask, labels=b_labels)
    loss = outputs[0]

    # Backward pass
    loss.backward()


    torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)


    optimizer.step()


    scheduler.step()


    optimizer.zero_grad()


    batch_loss += loss.item()

  avg_train_loss = batch_loss / len(train_dataloader)


  for param_group in optimizer.param_groups:
    print("\n\tCurrent Learning rate: ",param_group['lr'])
    learning_rate.append(param_group['lr'])

  train_loss_set.append(avg_train_loss)
  print(F'\n\tAverage Training loss: {avg_train_loss}')

  # Validation


  model.eval()


  eval_accuracy,eval_mcc_accuracy,nb_eval_steps = 0, 0, 0


  for batch in validation_dataloader:

    batch = tuple(t.to(device) for t in batch)

    b_input_ids, b_input_mask, b_labels = batch

    with torch.no_grad():

      logits = model(b_input_ids, token_type_ids=None, attention_mask=b_input_mask)


    logits = logits[0].to('cpu').numpy()
    label_ids = b_labels.to('cpu').numpy()

    pred_flat = np.argmax(logits, axis=1).flatten()
    labels_flat = label_ids.flatten()

    df_metrics=pd.DataFrame({'Epoch':epochs,'Actual_class':labels_flat,'Predicted_class':pred_flat})

    tmp_eval_accuracy = accuracy_score(labels_flat,pred_flat)
    tmp_eval_mcc_accuracy = matthews_corrcoef(labels_flat, pred_flat)

    eval_accuracy += tmp_eval_accuracy
    eval_mcc_accuracy += tmp_eval_mcc_accuracy
    nb_eval_steps += 1

  print(F'\n\tValidation Accuracy: {eval_accuracy/nb_eval_steps}')
  print(F'\n\tValidation MCC Accuracy: {eval_mcc_accuracy/nb_eval_steps}')

"""**NORMALISATION**"""

from sklearn.metrics import confusion_matrix,classification_report
def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    import itertools
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    print(cm)


    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt),
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    plt.tight_layout()
    plt.show()

df[['label','label_desc']].drop_duplicates(keep='first')

label2int = {
  "sadness": 4,
  "joy": 2,
  "anger": 0,
    "love":3,
  "fear": 1,
  "surprise": 5
}

df_metrics['Predicted_class'].unique()

"""**MODEL ACCURACY**"""

print(classification_report(df_metrics['Actual_class'].values, df_metrics['Predicted_class'].values, target_names=label2int.keys(), digits=len(label2int)))

"""**MODEL VISUALISATION**"""

plt.figure(figsize=(8, 6))
plt.plot(train_loss_set, label="Training loss")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.title("Training Loss Over Epochs")
plt.legend()
plt.show()


plt.figure(figsize=(8, 6))
plt.plot(learning_rate, label="Learning rate")
plt.xlabel("Step")
plt.ylabel("Learning Rate")
plt.title("Learning Rate Over Time")
plt.legend()
plt.show()

"""****SAVING TRAINED MODEL****"""

output_dir = '/content/mood-analysis-model/'

# Create output directory if it doesn't exist
if not os.path.exists(output_dir):
    os.makedirs(output_dir)


model_to_save = model.module if hasattr(model, 'module') else model  # Handles multi-GPU
model_to_save.save_pretrained(output_dir)
tokenizer.save_pretrained(output_dir)


device = torch.device("cuda" if torch.cuda.is_available() else "cpu")


tokenizer = BertTokenizer.from_pretrained(output_dir)
model = BertForSequenceClassification.from_pretrained(output_dir)
model.to(device)
model.eval()


def predict_emotion(text, model, tokenizer, max_len=256):
    # Preprocess the text
    inputs = tokenizer.encode_plus(
        text,
        add_special_tokens=True,
        max_length=max_len,
        padding='max_length',
        return_attention_mask=True,
        truncation=True,
        return_tensors='pt'
    )


    input_ids = inputs['input_ids'].to(device)
    attention_mask = inputs['attention_mask'].to(device)


    with torch.no_grad():
        outputs = model(input_ids, attention_mask=attention_mask)

    logits = outputs.logits  # Get the logits directly
    probabilities = torch.softmax(logits, dim=1)


    predicted_class = torch.argmax(probabilities, dim=1).item()


    return predicted_class, probabilities[0].cpu().numpy()  # Move probabilities to CPU for easier handling

"""****EXAMPLE TEXT ANALYSIS****"""

text = """I have my board result tomorrow and i know what is done is done and u cannot cry over spilt milk but i didn't do my best and I may score less marks nd i had misused my opportunity but there is still a chance I can give 2nd attempt and improve my mark and in between i have other entrance exams. I am really worried about my results tomorrow. I am worried about my parents disappointment
"""
predicted_class, probs = predict_emotion(text, model, tokenizer)

emotion_labels = ['anger', 'fear', 'joy', 'love','sadness', 'surprise']

print(f'Predicted Emotion: {emotion_labels[predicted_class]}')
print(f'Probabilities: {probs}')

!pip install onnx==1.14.1

import torch
import onnx

# Load your pre-trained PyTorch model
  # Replace with your actual model
model.eval()  # Set the model to evaluation mode

# Create a dummy input tensor
# Create a dummy input tensor with the correct shape for BERT
dummy_input = torch.randint(0, 30522, (1, 256), device=device) # Assuming a max sequence length of 256
dummy_attention_mask = torch.ones(1, 256, device=device, dtype=torch.long)  # Create a dummy attention mask


# Export the model to ONNX format
torch.onnx.export(
    model,
    args=(dummy_input, dummy_attention_mask),  # Pass both input_ids and attention_mask
    f='/content/emotion.onnx',
    verbose=True,
    input_names=['input_ids', 'attention_mask'],  # Specify input names
    output_names=['output'],  # Specify output names
    dynamic_axes={
        'input_ids': {0: 'batch_size', 1: 'sequence_length'},  # Make batch size and sequence length dynamic
        'attention_mask': {0: 'batch_size', 1: 'sequence_length'},
        'output': {0: 'batch_size'}
    }
)

